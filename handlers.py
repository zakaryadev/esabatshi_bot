# handlers.py
import sqlite3
from aiogram import Router, F
from aiogram.types import FSInputFile, Message
from aiogram.filters import Command
from database import (
    add_transaction,
    add_user,
    calculate_balance,
    calculate_balance_by_category,
    get_user_language,
    set_user_language,
    get_transaction_history,
    export_to_excel,
)
from analyze_text_with_gemini import analyze_text_with_gemini, parse_gemini_result
from voice_to_text import voice_to_text

router = Router()

@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    add_user(user_id, name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ—Ç—Ä–∞—Ç–∏–ª 300 —Å—É–º–æ–≤ –Ω–∞ –∫–æ—Ñ–µ'"
    )

@router.message(Command("history"))
async def show_history(message: Message):
    user_id = message.from_user.id
    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /history

    if args and args[0].lower() == "week":
        period = "week"
    elif args and args[0].lower() == "month":
        period = "month"
    else:
        period = None

    if period == "week":
        query = """
            SELECT type, amount, category, date 
            FROM transactions 
            WHERE user_id = ? AND date >= date('now', '-7 days')
            ORDER BY date DESC
        """
    elif period == "month":
        query = """
            SELECT type, amount, category, date 
            FROM transactions 
            WHERE user_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')
            ORDER BY date DESC
        """
    else:
        query = """
            SELECT type, amount, category, date 
            FROM transactions 
            WHERE user_id = ? 
            ORDER BY date DESC 
            LIMIT 10
        """

    conn = sqlite3.connect("budget.db")
    cursor = conn.cursor()
    cursor.execute(query, (user_id,))
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
    for i, (trans_type, amount, category, date) in enumerate(rows, start=1):
        sign = "+" if trans_type == "–¥–æ—Ö–æ–¥" else "-"
        history_text += f"{i}. [{date}] {trans_type.capitalize()}: {sign}{abs(amount):,.0f} —Å—É–º ({category})\n"

    await message.answer(history_text)

@router.message(F.voice)
async def handle_voice(message: Message, bot):
    user_id = message.from_user.id
    user_language = get_user_language(user_id) or "ru-RU"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    file_id = message.voice.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, "voice.ogg")

    text = voice_to_text("voice.ogg", language=user_language)
    result = analyze_text_with_gemini(text)
    await message.reply(result)

    parsed = parse_gemini_result(result)

    if parsed.get("—Ç–∏–ø") and parsed.get("—Å—É–º–º–∞"):
        try:
            amount = float(parsed["—Å—É–º–º–∞"])
            add_transaction(message.from_user.id, parsed)
            await message.answer(f"‚úÖ {parsed['—Ç–∏–ø'].capitalize()}: {amount:,.0f} —Å—É–º")
        except ValueError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) –∏ —Å—É–º–º—É.")
    
@router.message(Command("export"))
async def export_data(message: Message):
    user_id = message.from_user.id
    file_path = export_to_excel(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    document = FSInputFile(file_path)
    await message.answer_document(document=document, caption="üìä –í–∞—à –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    import os
    os.remove(file_path)

@router.message(Command("language"))
async def set_language(message: Message):
    user_id = message.from_user.id
    args = message.text.split()[1:]

    if not args:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: /language kazakh, /language uzbek, /language karakalpak")
        return

    language = args[0].lower()
    if language in ["kazakh", "kk"]:
        set_user_language(user_id, "kk-KZ")
        await message.answer("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∑–∞—Ö—Å–∫–∏–π")
    elif language in ["uzbek", "uz"]:
        set_user_language(user_id, "uz-UZ")
        await message.answer("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —É–∑–±–µ–∫—Å–∫–∏–π")
    elif language in ["karakalpak", "kaa"]:
        set_user_language(user_id, "uz-UZ")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∑–±–µ–∫—Å–∫–∏–π –∫–∞–∫ –∞–Ω–∞–ª–æ–≥
        await message.answer("‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å–∫–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∑–±–µ–∫—Å–∫–∏–π)")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫. –í—ã–±–µ—Ä–∏—Ç–µ: /language kazakh, /language uzbek, /language karakalpak")

@router.message(F.text)
async def handle_text(message: Message):
    text = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
    balance_keywords = ["–±–∞–ª–∞–Ω—Å", "—Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥", "—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è", "—Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å"]
    if any(keyword in text for keyword in balance_keywords):
        balance = calculate_balance(message.from_user.id)
        categories = calculate_balance_by_category(message.from_user.id)

        report_text = f"üßÆ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} —Å—É–º\n\n"
        report_text += "üìä –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"

        if not categories:
            report_text += "- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        else:
            for category, amount in categories.items():
                sign = "+" if amount >= 0 else "-"
                report_text += f"- {category}: {sign}{abs(amount):,.0f} —Å—É–º\n"

        await message.answer(report_text)
        return

    result = analyze_text_with_gemini(text)

    # –ï—Å–ª–∏ Gemini –≤–µ—Ä–Ω—É–ª BALANCE_REQUEST
    if "BALANCE_REQUEST" in result:
        balance = calculate_balance(message.from_user.id)
        categories = calculate_balance_by_category(message.from_user.id)

        report_text = f"üßÆ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,.0f} —Å—É–º\n\n"
        report_text += "üìä –ë–∞–ª–∞–Ω—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"

        if not categories:
            report_text += "- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        else:
            for category, amount in categories.items():
                sign = "+" if amount >= 0 else "-"
                report_text += f"- {category}: {sign}{abs(amount):,.0f} —Å—É–º\n"

        await message.answer(report_text)
        return

    parsed = parse_gemini_result(result)
    if parsed:
        try:
            amount = float(parsed["—Å—É–º–º–∞"])
            add_transaction(message.from_user.id, parsed)
            await message.answer(f"‚úÖ {parsed['—Ç–∏–ø'].capitalize()}: {amount:,.0f} —Å—É–º")
        except ValueError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.")